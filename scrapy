#!/usr/bin/env bash
# This script was generated by bashly 1.2.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
scrapy_usage() {
  printf "scrapy - Scrapy CLI\n\n"

  printf "%s\n" "Usage:"
  printf "  scrapy COMMAND\n"
  printf "  scrapy [COMMAND] --help | -h\n"
  printf "  scrapy --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Development Commands\n" "dev"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
scrapy_dev_usage() {
  printf "scrapy dev - Development Commands\n\n"
  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  scrapy dev COMMAND\n"
  printf "  scrapy dev [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run development server\n" "server"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
scrapy_dev_server_usage() {
  printf "scrapy dev server - Run development server\n\n"
  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  scrapy dev server\n"
  printf "  scrapy dev server --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# scripts/lib/docker.sh
check_docker() {
    # Check if Docker is running by attempting to communicate with the Docker daemon
    echo "Checking whether docker is running..."
    if docker info >/dev/null 2>&1; then
        echo "Docker is running."
    else
        echo "Docker is not running or not installed."
        exit 1
    fi
}

# scripts/lib/env.sh
load_env() {
    set -a
    . ./.env
    set +a
}

# scripts/lib/goose.sh
run_goose() {
  # Enable exporting all variables to the environment
  set -a

  # Define environment variables for Goose
  GOOSE_DRIVER="postgres"
  GOOSE_MIGRATION_DIR="./server/src/sql/schema"

  # Source the .env file for credentials
  . ./.env

  # Construct the Goose database connection string
  GOOSE_DBSTRING="postgres://${SCRAPY_DATABASE_USERNAME}:${SCRAPY_DATABASE_PASSWORD}@localhost:5432/${SCRAPY_DATABASE_NAME}"

  # Disable exporting variables
  set +a

  # Pass all arguments to Goose
  goose "$@"
}

# scripts/lib/postgres.sh
CONTAINER_NAME="scrapy_postgres"

ensure_postgres() {
    if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo "A container with the name '${CONTAINER_NAME}' already exists."
    # Start the container
    docker start "${CONTAINER_NAME}"
    echo "The container '${CONTAINER_NAME}' has been started."
    else
    # Run postgres docker container
    docker run --name "${CONTAINER_NAME}" \
        -p 5432:5432 \
        --env POSTGRES_PASSWORD=${SCRAPY_DATABASE_PASSWORD} \
        --env POSTGRES_USER=${SCRAPY_DATABASE_USERNAME} \
        --env POSTGRES_DB=${SCRAPY_DATABASE_NAME} \
        --health-cmd="pg_isready -U ${SCRAPY_DATABASE_USERNAME}" \
        --health-interval=10s \
        --health-timeout=5s \
        --health-retries=5 \
        -d postgres:17.2
    fi

    echo "Waiting for PostgreSQL container to be healthy..."
    until [ "$(docker inspect -f '{{.State.Health.Status}}' ${CONTAINER_NAME})" == "healthy" ]; do
        sleep 1
    done
    echo "PostgreSQL container is running on port 5432"
}

# :command.command_functions

# :command.function
scrapy_dev_server_command() {

  # scripts/dev_server_command.sh
  load_env
  check_docker
  ensure_postgres
  run_goose up

  echo "Starting scrapy server..."
  $(cd server/src && go run .)
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        scrapy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    dev | d)
      action="dev"
      shift
      scrapy_dev_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      scrapy_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scrapy_dev_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        scrapy_dev_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    server | s)
      action="server"
      shift
      scrapy_dev_server_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      scrapy_dev_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
scrapy_dev_server_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        scrapy_dev_server_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="dev server"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.globals
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

}

# :command.run
run() {
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "dev") scrapy_dev_command ;;
    "dev server") scrapy_dev_server_command ;;
  esac
}

initialize
run "$@"
