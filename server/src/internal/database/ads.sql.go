// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ads.sql

package database

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const bulkCreateAds = `-- name: BulkCreateAds :many
INSERT INTO ads (id, title, price, description, location, postal_code, category_id, posted_at, link)
VALUES (
    unnest($1::TEXT ARRAY),
    unnest($2::TEXT ARRAY),
    unnest($3::TEXT ARRAY),
    unnest($4::TEXT ARRAY),
    unnest($5::TEXT ARRAY),
    unnest($6::TEXT ARRAY),
    unnest($7::TEXT ARRAY),
    unnest($8::TEXT ARRAY),
    unnest($9::TEXT ARRAY)
)
ON CONFLICT (id) DO NOTHING
RETURNING id, title, price, description, location, postal_code, category_id, posted_at, link, created_at, updated_at
`

type BulkCreateAdsParams struct {
	Column1 []string
	Column2 []string
	Column3 []string
	Column4 []string
	Column5 []string
	Column6 []string
	Column7 []string
	Column8 []string
	Column9 []string
}

func (q *Queries) BulkCreateAds(ctx context.Context, arg BulkCreateAdsParams) ([]Ad, error) {
	rows, err := q.db.QueryContext(ctx, bulkCreateAds,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
		pq.Array(arg.Column5),
		pq.Array(arg.Column6),
		pq.Array(arg.Column7),
		pq.Array(arg.Column8),
		pq.Array(arg.Column9),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ad
	for rows.Next() {
		var i Ad
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Price,
			&i.Description,
			&i.Location,
			&i.PostalCode,
			&i.CategoryID,
			&i.PostedAt,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAd = `-- name: CreateAd :one
INSERT INTO ads (id, title, price, description, location, postal_code, category_id, posted_at, link)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) RETURNING id, title, price, description, location, postal_code, category_id, posted_at, link, created_at, updated_at
`

type CreateAdParams struct {
	ID          string
	Title       string
	Price       sql.NullString
	Description sql.NullString
	Location    sql.NullString
	PostalCode  sql.NullString
	CategoryID  sql.NullString
	PostedAt    sql.NullString
	Link        sql.NullString
}

func (q *Queries) CreateAd(ctx context.Context, arg CreateAdParams) (Ad, error) {
	row := q.db.QueryRowContext(ctx, createAd,
		arg.ID,
		arg.Title,
		arg.Price,
		arg.Description,
		arg.Location,
		arg.PostalCode,
		arg.CategoryID,
		arg.PostedAt,
		arg.Link,
	)
	var i Ad
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.Location,
		&i.PostalCode,
		&i.CategoryID,
		&i.PostedAt,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdByEbayId = `-- name: GetAdByEbayId :one
SELECT id, title, price, description, location, postal_code, category_id, posted_at, link, created_at, updated_at FROM ads WHERE id = $1
`

func (q *Queries) GetAdByEbayId(ctx context.Context, id string) (Ad, error) {
	row := q.db.QueryRowContext(ctx, getAdByEbayId, id)
	var i Ad
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.Location,
		&i.PostalCode,
		&i.CategoryID,
		&i.PostedAt,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNumberOfDuplicates = `-- name: GetNumberOfDuplicates :one
SELECT COUNT(*) FROM ads
WHERE id=ANY($1::TEXT ARRAY)
`

func (q *Queries) GetNumberOfDuplicates(ctx context.Context, dollar_1 []string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumberOfDuplicates, pq.Array(dollar_1))
	var count int64
	err := row.Scan(&count)
	return count, err
}
