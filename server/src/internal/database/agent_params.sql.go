// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: agent_params.sql

package database

import (
	"context"
)

const addSearchParamToAgent = `-- name: AddSearchParamToAgent :one
INSERT into agent_params (agent_id, params_id)
VALUES (
    $1, 
    $2
) RETURNING id, agent_id, params_id, created_at, updated_at
`

type AddSearchParamToAgentParams struct {
	AgentID  int32
	ParamsID int32
}

func (q *Queries) AddSearchParamToAgent(ctx context.Context, arg AddSearchParamToAgentParams) (AgentParam, error) {
	row := q.db.QueryRowContext(ctx, addSearchParamToAgent, arg.AgentID, arg.ParamsID)
	var i AgentParam
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.ParamsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSearchParamsBySearchAgent = `-- name: GetSearchParamsBySearchAgent :many
SELECT p.id, p.keyword, p.location_id, p.distance, p.created_at, p.udpated_at from agent_params ap
JOIN agents a ON a.id = ap.agent_id
JOIN params p ON p.id = ap.params_id
WHERE a.id = $1
`

func (q *Queries) GetSearchParamsBySearchAgent(ctx context.Context, id int32) ([]Param, error) {
	rows, err := q.db.QueryContext(ctx, getSearchParamsBySearchAgent, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Param
	for rows.Next() {
		var i Param
		if err := rows.Scan(
			&i.ID,
			&i.Keyword,
			&i.LocationID,
			&i.Distance,
			&i.CreatedAt,
			&i.UdpatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
