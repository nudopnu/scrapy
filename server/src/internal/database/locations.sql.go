// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: locations.sql

package database

import (
	"context"
)

const addLocation = `-- name: AddLocation :one
INSERT INTO locations (postal_code, location_id)
VALUES (
    $1, $2
) RETURNING id, postal_code, location_id, created_at, updated_at
`

type AddLocationParams struct {
	PostalCode string
	LocationID string
}

func (q *Queries) AddLocation(ctx context.Context, arg AddLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, addLocation, arg.PostalCode, arg.LocationID)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.PostalCode,
		&i.LocationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationByPostalCode = `-- name: GetLocationByPostalCode :one
SELECT id, postal_code, location_id, created_at, updated_at from locations
WHERE postal_code = $1
`

func (q *Queries) GetLocationByPostalCode(ctx context.Context, postalCode string) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByPostalCode, postalCode)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.PostalCode,
		&i.LocationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, postal_code, location_id, created_at, updated_at from locations
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.PostalCode,
			&i.LocationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
