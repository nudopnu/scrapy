// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: images.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const bulkCreateImages = `-- name: BulkCreateImages :many
INSERT INTO images (ad_id, label, image_number, url)
VALUES (
    unnest($1::TEXT ARRAY),
    unnest($2::TEXT ARRAY),
    unnest($3::INT ARRAY),
    unnest($4::TEXT ARRAY)
) ON CONFLICT (url) DO NOTHING RETURNING id, ad_id, image_number, label, url, created_at, updated_at
`

type BulkCreateImagesParams struct {
	Column1 []string
	Column2 []string
	Column3 []int32
	Column4 []string
}

func (q *Queries) BulkCreateImages(ctx context.Context, arg BulkCreateImagesParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, bulkCreateImages,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.AdID,
			&i.ImageNumber,
			&i.Label,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThumbnailsForAgent = `-- name: GetThumbnailsForAgent :many
SELECT ad_id, images, id, title, price, description, location, postal_code, category_id, posted_at, link, created_at, updated_at FROM (
	SELECT r.ad_id, json_agg(json_build_object('image_url', i.url, 'image_number', i.image_number)) AS images from agents a
	JOIN agent_params ap on ap.agent_id = a.id
	JOIN params p on ap.params_id = p.id
	JOIN results r on r.params_id = p.id
	JOIN images i on i.ad_id = r.ad_id
	WHERE a.id = $1 and label = 'thumbnail'
	GROUP BY r.ad_id
) as images
JOIN ads on ads.id = images.ad_id
LIMIT 3
`

type GetThumbnailsForAgentRow struct {
	AdID        string
	Images      json.RawMessage
	ID          string
	Title       string
	Price       sql.NullString
	Description sql.NullString
	Location    sql.NullString
	PostalCode  sql.NullString
	CategoryID  sql.NullString
	PostedAt    sql.NullString
	Link        sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetThumbnailsForAgent(ctx context.Context, id int32) ([]GetThumbnailsForAgentRow, error) {
	rows, err := q.db.QueryContext(ctx, getThumbnailsForAgent, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetThumbnailsForAgentRow
	for rows.Next() {
		var i GetThumbnailsForAgentRow
		if err := rows.Scan(
			&i.AdID,
			&i.Images,
			&i.ID,
			&i.Title,
			&i.Price,
			&i.Description,
			&i.Location,
			&i.PostalCode,
			&i.CategoryID,
			&i.PostedAt,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
